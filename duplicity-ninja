#!/bin/bash

#######################################

fatal() {
    echo >&2 $*
    exit 1
}

warning() {
    echo >&2 $*
}

debug() {
    echo $*
    :
}


# defaults
conffile="/etc/backupninja.conf"
configfile="/etc/backup.d/50.backup.dup"
when="now"
to="/var/tmp/duplicity-restores"

usage() {
    cat <<EOF
Usage:
    duplicity-ninja <cmd>

Where <cmd> can be:

    restore [-t <time>] [-f <file-to-restore>] [common-opts]
    list-current-files [-t <when>]
    collection-status
    remove-all-but-n-full -N <count> [-F]
    remove-older-than [-t <when>] [-F]
    cleanup [-F]
    verify [-f <file-to-verify>]
    help


Options are:

    -F    force, actually delete stuff rather than report what would be done
    -N <count>  supplies the number of full backups to remove
    -f <path>   supplies a file or directory to verify (recursively)
    -C <path>   overrides the default backupninja.conf file: $conffile
    -c <path>   overrides the default duplicity backup config: $configfile
    -t <when>   overrides the default time, '$when'
    -d <path>   overrides the default restore destination: $to
    -n          just print the command which would be executed
    -h          print this help (same as the help / no command)
EOF
}

cmd="$1"
shift

while getopts "c:C:t:f:d:N:nF" opt; do
    case $opt in
	c) configfile="$OPTARG";;
	C) conffile="$OPTARG";;
	t) when="$OPTARG";;
	f) what="$OPTARG";;
	d) to="$OPTARG";;
	n) dryrun=1;;
	F) force="--force";;
        N) count="$OPTARG";;
	h) usage;;
	\?) fatal "invalid option '$opt'";
    esac
    shift $(($OPTIND - 1))
done


[ -z "$conffile" ] && fatal "you must supply the path to the backupninja config file"
[ -f "$conffile" ] || fatal "not an existing file: $conffile"

[ -z "$configfile" ] && fatal "you must supply the path to the backupninja config file"
[ -f "$configfile" ] || fatal "not an existing file: $configfile"

libdirectory=`grep '^libdirectory' $conffile | /usr/bin/awk '{print $3}'`
if [ -z "$libdirectory" ]; then
   if [ -d "/usr/libexec/backupninja" ]; then
      libdirectory="/usr/libexec/backupninja"
   else
      echo "Could not find entry 'libdirectory' in $conffile."
      fatal "Could not find entry 'libdirectory' in $conffile."
   fi
else
   if [ ! -d "$libdirectory" ]; then
      echo "Lib directory $libdirectory not found."
      fatal "Lib directory $libdirectory not found."
   fi
fi

. $libdirectory/tools

setfile $configfile

getconf options
getconf tmpdir

setsection gpg
getconf password
getconf sign no
getconf encryptkey
getconf signkey

setsection source
getconf include
getconf exclude

setsection dest
getconf desturl
getconf awsaccesskeyid
getconf awssecretaccesskey
getconf ftp_password
getconf sshoptions
getconf bandwidthlimit 0
getconf desthost
getconf destdir
getconf destuser
destdir=${destdir%/}

### duplicity version (ignore anything else than 0-9 and ".")
duplicity_version="`duplicity --version | /usr/bin/awk '/^duplicity/ {print $2}' | /bin/sed 's/[^.[:digit:]]//g'`"
duplicity_major="`echo $duplicity_version | /usr/bin/awk -F '.' '{print $1}'`"
duplicity_minor="`echo $duplicity_version | /usr/bin/awk -F '.' '{print $2}'`"
duplicity_sub="`echo $duplicity_version | /usr/bin/awk -F '.' '{print $3}'`"


# < 0.4.2 : only uses ssh and scp
if [ "$duplicity_major" -le 0 -a "$duplicity_minor" -le 4 -a "$duplicity_sub" -lt 2 ]; then
   opts="${opts} --scp-command 'scp $scpoptions' --ssh-command 'ssh $sshoptions'"
# >= 0.4.2 : also uses sftp, --sftp-command option is now supported
else
   sftpoptions="$sshoptions"
   # == 0.4.2 : uses ssh, scp and sftp
   if [ "$duplicity_major" -eq 0 -a "$duplicity_minor" -eq 4 -a "$duplicity_sub" -eq 2 ]; then
      opts="${opts} --scp-command 'scp $scpoptions' --sftp-command 'sftp $sftpoptions' --ssh-command 'ssh $sshoptions'"
   # >= 0.4.3 : uses only scp and sftp, --ssh-command option is not supported anymore
   else
      optis="${opts} --scp-command 'scp $scpoptions' --sftp-command 'sftp $sftpoptions'"
   fi
fi

[ -n "$desturl" -o -n "$destdir" ]  || fatal "The destination directory (destdir) must be set when desturl is not used."
if [ -n "$desturl" ]; then
   [ -z "$destuser" ] || warning 'the configured destuser is ignored since desturl is set'
   [ -z "$desthost" ] || warning 'the configured desthost is ignored since desturl is set'
   [ -z "$destdir" ] || warning 'the configured destdir is ignored since desturl is set'
   from="$desturl"
elif [ "${configfile##*.}" = "rsyncdup" ]; then
    # Special case for my hacked rsyncdup handler.  FIXME remove when obsolete
   from="rsync://$desthost/$destdir" 
else
   from="scp://$destuser@$desthost/$destdir"
fi

### Symmetric or asymmetric (public/private key pair) encryption
if [ -n "$encryptkey" ]; then
   opts="${opts} --encrypt-key $encryptkey"
   debug "Data will be encrypted with the GnuPG key $encryptkey."
else
   debug "Data will be encrypted using symmetric encryption."
fi

### If desturl is an S3 URL export the AWS environment variables
if [ "`echo $desturl | /usr/bin/awk -F ':' '{print $1}'`" == "s3+http" ]; then
   export AWS_ACCESS_KEY_ID="$awsaccesskeyid"
   export AWS_SECRET_ACCESS_KEY="$awssecretaccesskey"
fi

export PASSPHRASE=$password
export FTP_PASSWORD=$ftp_password

### Data signing (or not)
if [ "$sign" == yes ]; then
   # duplicity is not able to sign data when using symmetric encryption
   [ -n "$encryptkey" ] || fatal "The encryptkey option must be set when signing."

   # if needed, initialize signkey to a value that is not empty (checked above)
   [ -n "$signkey" ] || signkey="$encryptkey"

   opts="${opts} --sign-key $signkey"
   debug "Data will be signed will the GnuPG key $signkey."
else
   debug "Data won't be signed."
fi

set -o noglob

excludes=""
# excludes
SAVEIFS=$IFS
IFS=$(echo -en "\n\b")
for i in $exclude; do
   str="${i//__star__/*}"
   excludes="${excludes} --exclude '$str'"
done
IFS=$SAVEIFS


# includes
includes=""
SAVEIFS=$IFS
IFS=$(echo -en "\n\b")
for i in $include; do
   [ "$i" != "/" ] || fatal "Sorry, you cannot use 'include = /'"
   str="${i//__star__/*}"
   includes="${includes} --include '$str'"
done
IFS=$SAVEIFS

set +o noglob
includes=${includes//\\*/\\\\\\*}
excludes=${excludes//\\*/\\\\\\*}

precmd=
if [ -n "$tmpdir" ]; then
   if [ ! -d "$tmpdir" ]; then
      debug "Temporary directory ($tmpdir) does not exist, creating it."
      mkdir -p "$tmpdir"
      [ $? -eq 0 ] || fatal "Could not create temporary directory ($tmpdir)."
      chmod 0700 "$tmpdir"
   fi
   debug "Using $tmpdir as TMPDIR"
   export TMPDIR=$tmpdir
fi

case $cmd in
    restore) dupargs="$opts ${when:+--restore-time $when} ${what:+--file-to-restore $what} $from ${to%%/}/${what##*/}"
	mkdir -p $to
	echo "restoring to: $to";;
    list-current-files) dupargs="$opts ${when:+--time $when} $from";;
    collection-status) dupargs="$opts $from";;
    remove-all-but-n-full) dupargs="$count $opts $force $from";;
    remove-older-than) dupargs="$opts ${when:+--time $when} $force $from";;
    cleanup) dupargs="$opts $force $from";;
    verify) dupargs="$opts $excludes ${what:+--file-to-restore $what} $from /";;
    *) usage; exit;;
esac


# before 0.4.4, commands were expressed as an option
if [ "$duplicity_major" -le 0 -a "$duplicity_minor" -le 4 -a "$duplicity_sub" -lt 4 ]; then
  if [ "$cmd" == "restore" ]; then
      cmd=""
  else
      cmd="--$cmd"
  fi
else
  [ -n "$cmd" ] || fatal "you must supply a duplicity command"
fi

debug duplicity $cmd $dupargs
[ -z "$dryrun" ] &&  duplicity $cmd $dupargs

